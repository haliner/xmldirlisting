#! /usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2010  Stefan Haller <haliner@googlemail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
This script generates an xml file containing a full listing of the current
working directory.
"""

import os
import os.path
import xml.dom.minidom


class FilesystemObject:

    """Base class for directory and file classes."""

    def __init__(self, parent = None, name = None):
        self.parent = parent
        self.name = name

    def getFullName(self):
        """Return the whole path of this object (including the parent's one)."""
        if self.parent is not None:
            return os.path.join(self.parent.getFullName(), self.name)
        else:
            return self.name

    def toXmlNode(self, doc, parent = None):
        """Return a xml element representing the filesystem object.

        doc must be an xml document. parent must be either an xml element or
        None. If parent is not None, the xml node is automatically appended
        to the parent as a child node.

        Child classes should overload this function and change the returned
        xml element afterwards.
        """
        node = doc.createElement('')
        if parent is not None:
            parent.appendChild(node)
        node.setAttribute('name', self.name)
        return node


class Directory(FilesystemObject):

    """Directory class.

    Represents a single directory. Each directory has a parent (None for the
    top level directory) and a list of subdirectories and files.
    """

    def __init__(self, parent = None, name = None):
        """Delegate call to base class and set class members."""
        super().__init__(parent, name)
        self.dirs = []
        self.files = []

    def createDirectory(self, name):
        """Create subdirectory object.

        This function creates the subdirectory object, appends it to the
        internal list of subdirectories and returns the newly created object.

        The parent of the new object is set accordingly.
        """
        o = Directory(self, name)
        self.dirs.append(o)
        return o

    def createFile(self, name):
        """Create file object.

        This functions creates the file object, appends it to the internal list
        of files and returns the newly created object.

        The parent of the new object is set accordingly.
        """
        o = File(self, name)
        self.files.append(o)
        return o

    def scan(self):
        """Scan the directory tree below the current directory.

        All subdirectories are fetched and are put into the list of
        subdirectory. For each directory a new Directory class will be created
        and their .scan() function is called recursively.

        For each file in the directory an File object is created and it is
        appended to the list of files.
        """
        current = self.getFullName()
        for entry in os.listdir(current):
            if os.path.isdir(os.path.join(current, entry)):
                self.createDirectory(entry).scan()
            else:
                self.createFile(entry)

    def toXmlNode(self, doc, parent = None):
        """Return an xml element representing the directory.

        See base class' function docstring.

        This function calls itself recursively for all subdirectories.
        """
        node = super().toXmlNode(doc, parent)
        node.tagName = 'directory'
        for directory in self.dirs:
            directory.toXmlNode(doc, node)
        for file in self.files:
            file.toXmlNode(doc, node)
        return node


class File(FilesystemObject):

    """File class.

    Represents a single file. Each file has a parent directory and some
    properties like ctime, mtime, atime and size.
    """

    def __init__(self, parent, name):
        """Delegate call to base class and set class members."""
        super().__init__(parent, name)
        statinfo = os.stat(self.getFullName())
        self.ctime = statinfo.st_ctime
        self.mtime = statinfo.st_mtime
        self.atime = statinfo.st_atime
        self.size = statinfo.st_size

    def toXmlNode(self, doc, parent = None):
        """Return an xml element representing the directory.

        See base class' function docstring.
        """
        node = super().toXmlNode(doc, parent)
        node.tagName = 'file'
        node.setAttribute('size', str(self.size))
        node.setAttribute('ctime', str(self.ctime))
        node.setAttribute('mtime', str(self.mtime))
        node.setAttribute('atime', str(self.atime))
        return node


class XmlDirlisting():

    """Dirlisting factory, which builds an XML DOM tree."""

    def build(self, directory = None):
        """Return an XML DOM tree of directory.

        This function builds the current directory and file tree of the
        given directory. This data is used to build an XML DOM tree, which is
        returned.

        If directory is None, the tree of the current working directory will
        be processed.
        """
        if directory is None:
            directory = '.'
        root_dir = Directory(parent = None, name = directory)
        root_dir.scan()

        doc = xml.dom.minidom.Document()
        elem = root_dir.toXmlNode(doc)
        elem.tagName = 'dirlisting'
        # remove name attribute from xml root (= top level directory)
        # TODO: dirty code, remove all attributes instead
        elem.removeAttributeNode(elem.attributes.item(0))
        doc.appendChild(elem)

        return doc

if __name__ == '__main__':
    print(XmlDirlisting().build().toprettyxml('  '), end = '')
